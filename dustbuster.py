"""
DustBuster: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ "–ø—ã–ª–µ–≤—ã—Ö –∞—Ç–∞–∫" (dust attacks) –Ω–∞ Bitcoin-–∫–æ—à–µ–ª—å–∫–∏.
"""

import requests
import argparse

DUST_THRESHOLD = 0.00001  # BTC, –ø–æ—Ä–æ–≥ –¥–ª—è –ø—ã–ª–∏ (~1000 —Å–∞—Ç–æ—à–∏)

def fetch_transactions(address):
    url = f"https://api.blockchair.com/bitcoin/dashboards/address/{address}"
    r = requests.get(url)
    if r.status_code != 200:
        raise Exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–¥—Ä–µ—Å—É.")
    return r.json()["data"][address]["transactions"]

def fetch_transaction_details(txid):
    url = f"https://api.blockchair.com/bitcoin/raw/transaction/{txid}"
    r = requests.get(url)
    if r.status_code != 200:
        return None
    return r.json()["data"][txid]["decoded_raw_transaction"]

def satoshi_to_btc(sats):
    return sats / 100000000

def analyze_dust(address):
    print(f"üßπ –ê–Ω–∞–ª–∏–∑ –ø—ã–ª–µ–≤—ã—Ö –∞—Ç–∞–∫ –Ω–∞ –∞–¥—Ä–µ—Å: {address}")
    txs = fetch_transactions(address)
    dust_txs = []

    for txid in txs[:50]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        tx = fetch_transaction_details(txid)
        if not tx:
            continue

        outputs = tx.get("vout", [])
        for o in outputs:
            value = float(o.get("value", 0))
            if value < DUST_THRESHOLD:
                addresses = o.get("script_pub_key", {}).get("addresses", [])
                if address in addresses:
                    dust_txs.append((txid, value))

    print(f"üîé –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—ã–ª–µ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(dust_txs)}")

    if dust_txs:
        print("‚ö†Ô∏è –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:")
        for txid, value in dust_txs:
            print(f"  - TXID: {txid}, —Å—É–º–º–∞: {value} BTC")
    else:
        print("‚úÖ –ü—ã–ª–µ–≤—ã—Ö –∞—Ç–∞–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="DustBuster ‚Äî –≤—ã—è–≤–ª–µ–Ω–∏–µ dust-–∞—Ç–∞–∫ –Ω–∞ Bitcoin-–∫–æ—à–µ–ª—å–∫–∏.")
    parser.add_argument("address", help="Bitcoin-–∞–¥—Ä–µ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    args = parser.parse_args()
    analyze_dust(args.address)
